// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const getLineByID = `-- name: GetLineByID :one


SELECT id, parent_id, entity_type, name, comment, last_user, modified_date, status_color_id FROM lines WHERE id = ?
`

// queries.sql
// LINE QUERIES
func (q *Queries) GetLineByID(ctx context.Context, id string) (Line, error) {
	row := q.db.QueryRowContext(ctx, getLineByID, id)
	var i Line
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.EntityType,
		&i.Name,
		&i.Comment,
		&i.LastUser,
		&i.ModifiedDate,
		&i.StatusColorID,
	)
	return i, err
}

const getOperationByID = `-- name: GetOperationByID :one

SELECT id, parent_id, entity_type, short_name, description, decision_criteria, sequence_group, sequence, always_perform, comment, last_user, modified_date, q_gate_relevant_id, decision_class_id, saving_class_id, verification_class_id, generation_class_id, serial_or_parallel_id, status_color_id FROM operations WHERE id = ?
`

// OPERATION QUERIES
func (q *Queries) GetOperationByID(ctx context.Context, id string) (Operation, error) {
	row := q.db.QueryRowContext(ctx, getOperationByID, id)
	var i Operation
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.EntityType,
		&i.ShortName,
		&i.Description,
		&i.DecisionCriteria,
		&i.SequenceGroup,
		&i.Sequence,
		&i.AlwaysPerform,
		&i.Comment,
		&i.LastUser,
		&i.ModifiedDate,
		&i.QGateRelevantID,
		&i.DecisionClassID,
		&i.SavingClassID,
		&i.VerificationClassID,
		&i.GenerationClassID,
		&i.SerialOrParallelID,
		&i.StatusColorID,
	)
	return i, err
}

const getStationByID = `-- name: GetStationByID :one

SELECT id, parent_id, entity_type, number, name_description, comment, last_user, modified_date, station_type_id, status_color_id FROM stations WHERE id = ?
`

// STATION QUERIES
func (q *Queries) GetStationByID(ctx context.Context, id string) (Station, error) {
	row := q.db.QueryRowContext(ctx, getStationByID, id)
	var i Station
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.EntityType,
		&i.Number,
		&i.NameDescription,
		&i.Comment,
		&i.LastUser,
		&i.ModifiedDate,
		&i.StationTypeID,
		&i.StatusColorID,
	)
	return i, err
}

const getToolByID = `-- name: GetToolByID :one

SELECT id, parent_id, entity_type, short_name, description, ip_address_device, tool_with_sps, sps_plc_name_spa_service, sps_db_no_send, sps_db_no_receive, sps_pre_check_byte, sps_address_in_send_db, sps_address_in_receive_db, comment, last_user, modified_date, tool_class_id, tool_type_id, status_color_id FROM tools WHERE id = ?
`

// TOOL QUERIES
func (q *Queries) GetToolByID(ctx context.Context, id string) (Tool, error) {
	row := q.db.QueryRowContext(ctx, getToolByID, id)
	var i Tool
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.EntityType,
		&i.ShortName,
		&i.Description,
		&i.IpAddressDevice,
		&i.ToolWithSps,
		&i.SpsPlcNameSpaService,
		&i.SpsDbNoSend,
		&i.SpsDbNoReceive,
		&i.SpsPreCheckByte,
		&i.SpsAddressInSendDb,
		&i.SpsAddressInReceiveDb,
		&i.Comment,
		&i.LastUser,
		&i.ModifiedDate,
		&i.ToolClassID,
		&i.ToolTypeID,
		&i.StatusColorID,
	)
	return i, err
}

const insertLine = `-- name: InsertLine :exec
INSERT INTO lines (id, parent_id, entity_type, name, comment, last_user, modified_date, status_color_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertLineParams struct {
	ID            string         `json:"id"`
	ParentID      sql.NullString `json:"parent_id"`
	EntityType    sql.NullString `json:"entity_type"`
	Name          sql.NullString `json:"name"`
	Comment       sql.NullString `json:"comment"`
	LastUser      sql.NullString `json:"last_user"`
	ModifiedDate  sql.NullString `json:"modified_date"`
	StatusColorID sql.NullString `json:"status_color_id"`
}

func (q *Queries) InsertLine(ctx context.Context, arg InsertLineParams) error {
	_, err := q.db.ExecContext(ctx, insertLine,
		arg.ID,
		arg.ParentID,
		arg.EntityType,
		arg.Name,
		arg.Comment,
		arg.LastUser,
		arg.ModifiedDate,
		arg.StatusColorID,
	)
	return err
}

const insertOperation = `-- name: InsertOperation :exec
INSERT INTO operations (id, parent_id, entity_type, short_name, description, decision_criteria, sequence_group, sequence, always_perform, comment, last_user, modified_date, q_gate_relevant_id, decision_class_id, saving_class_id, verification_class_id, generation_class_id, serial_or_parallel_id, status_color_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertOperationParams struct {
	ID                  string         `json:"id"`
	ParentID            sql.NullString `json:"parent_id"`
	EntityType          sql.NullString `json:"entity_type"`
	ShortName           sql.NullString `json:"short_name"`
	Description         sql.NullString `json:"description"`
	DecisionCriteria    sql.NullString `json:"decision_criteria"`
	SequenceGroup       sql.NullString `json:"sequence_group"`
	Sequence            sql.NullString `json:"sequence"`
	AlwaysPerform       sql.NullString `json:"always_perform"`
	Comment             sql.NullString `json:"comment"`
	LastUser            sql.NullString `json:"last_user"`
	ModifiedDate        sql.NullString `json:"modified_date"`
	QGateRelevantID     sql.NullString `json:"q_gate_relevant_id"`
	DecisionClassID     sql.NullString `json:"decision_class_id"`
	SavingClassID       sql.NullString `json:"saving_class_id"`
	VerificationClassID sql.NullString `json:"verification_class_id"`
	GenerationClassID   sql.NullString `json:"generation_class_id"`
	SerialOrParallelID  sql.NullString `json:"serial_or_parallel_id"`
	StatusColorID       sql.NullString `json:"status_color_id"`
}

func (q *Queries) InsertOperation(ctx context.Context, arg InsertOperationParams) error {
	_, err := q.db.ExecContext(ctx, insertOperation,
		arg.ID,
		arg.ParentID,
		arg.EntityType,
		arg.ShortName,
		arg.Description,
		arg.DecisionCriteria,
		arg.SequenceGroup,
		arg.Sequence,
		arg.AlwaysPerform,
		arg.Comment,
		arg.LastUser,
		arg.ModifiedDate,
		arg.QGateRelevantID,
		arg.DecisionClassID,
		arg.SavingClassID,
		arg.VerificationClassID,
		arg.GenerationClassID,
		arg.SerialOrParallelID,
		arg.StatusColorID,
	)
	return err
}

const insertStation = `-- name: InsertStation :exec
INSERT INTO stations (id, parent_id, entity_type, number, name_description, comment, last_user, modified_date, station_type_id, status_color_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertStationParams struct {
	ID              string         `json:"id"`
	ParentID        sql.NullString `json:"parent_id"`
	EntityType      sql.NullString `json:"entity_type"`
	Number          sql.NullString `json:"number"`
	NameDescription sql.NullString `json:"name_description"`
	Comment         sql.NullString `json:"comment"`
	LastUser        sql.NullString `json:"last_user"`
	ModifiedDate    sql.NullString `json:"modified_date"`
	StationTypeID   sql.NullString `json:"station_type_id"`
	StatusColorID   sql.NullString `json:"status_color_id"`
}

func (q *Queries) InsertStation(ctx context.Context, arg InsertStationParams) error {
	_, err := q.db.ExecContext(ctx, insertStation,
		arg.ID,
		arg.ParentID,
		arg.EntityType,
		arg.Number,
		arg.NameDescription,
		arg.Comment,
		arg.LastUser,
		arg.ModifiedDate,
		arg.StationTypeID,
		arg.StatusColorID,
	)
	return err
}

const insertTool = `-- name: InsertTool :exec
INSERT INTO tools (id, parent_id, entity_type, short_name, description, ip_address_device, tool_with_sps, sps_plc_name_spa_service, sps_db_no_send, sps_db_no_receive, sps_pre_check_byte, sps_address_in_send_db, sps_address_in_receive_db, comment, last_user, modified_date, tool_class_id, tool_type_id, status_color_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type InsertToolParams struct {
	ID                    string         `json:"id"`
	ParentID              sql.NullString `json:"parent_id"`
	EntityType            sql.NullString `json:"entity_type"`
	ShortName             sql.NullString `json:"short_name"`
	Description           sql.NullString `json:"description"`
	IpAddressDevice       sql.NullString `json:"ip_address_device"`
	ToolWithSps           sql.NullString `json:"tool_with_sps"`
	SpsPlcNameSpaService  sql.NullString `json:"sps_plc_name_spa_service"`
	SpsDbNoSend           sql.NullString `json:"sps_db_no_send"`
	SpsDbNoReceive        sql.NullString `json:"sps_db_no_receive"`
	SpsPreCheckByte       sql.NullString `json:"sps_pre_check_byte"`
	SpsAddressInSendDb    sql.NullString `json:"sps_address_in_send_db"`
	SpsAddressInReceiveDb sql.NullString `json:"sps_address_in_receive_db"`
	Comment               sql.NullString `json:"comment"`
	LastUser              sql.NullString `json:"last_user"`
	ModifiedDate          sql.NullString `json:"modified_date"`
	ToolClassID           sql.NullString `json:"tool_class_id"`
	ToolTypeID            sql.NullString `json:"tool_type_id"`
	StatusColorID         sql.NullString `json:"status_color_id"`
}

func (q *Queries) InsertTool(ctx context.Context, arg InsertToolParams) error {
	_, err := q.db.ExecContext(ctx, insertTool,
		arg.ID,
		arg.ParentID,
		arg.EntityType,
		arg.ShortName,
		arg.Description,
		arg.IpAddressDevice,
		arg.ToolWithSps,
		arg.SpsPlcNameSpaService,
		arg.SpsDbNoSend,
		arg.SpsDbNoReceive,
		arg.SpsPreCheckByte,
		arg.SpsAddressInSendDb,
		arg.SpsAddressInReceiveDb,
		arg.Comment,
		arg.LastUser,
		arg.ModifiedDate,
		arg.ToolClassID,
		arg.ToolTypeID,
		arg.StatusColorID,
	)
	return err
}

const updateLine = `-- name: UpdateLine :exec
UPDATE lines
SET parent_id = ?, entity_type = ?, name = ?, comment = ?, last_user = ?, modified_date = ?, status_color_id = ?
WHERE id = ?
`

type UpdateLineParams struct {
	ParentID      sql.NullString `json:"parent_id"`
	EntityType    sql.NullString `json:"entity_type"`
	Name          sql.NullString `json:"name"`
	Comment       sql.NullString `json:"comment"`
	LastUser      sql.NullString `json:"last_user"`
	ModifiedDate  sql.NullString `json:"modified_date"`
	StatusColorID sql.NullString `json:"status_color_id"`
	ID            string         `json:"id"`
}

func (q *Queries) UpdateLine(ctx context.Context, arg UpdateLineParams) error {
	_, err := q.db.ExecContext(ctx, updateLine,
		arg.ParentID,
		arg.EntityType,
		arg.Name,
		arg.Comment,
		arg.LastUser,
		arg.ModifiedDate,
		arg.StatusColorID,
		arg.ID,
	)
	return err
}

const updateOperation = `-- name: UpdateOperation :exec
UPDATE operations
SET parent_id = ?, entity_type = ?, short_name = ?, description = ?, decision_criteria = ?, sequence_group = ?, sequence = ?, always_perform = ?, comment = ?, last_user = ?, modified_date = ?, q_gate_relevant_id = ?, decision_class_id = ?, saving_class_id = ?, verification_class_id = ?, generation_class_id = ?, serial_or_parallel_id = ?, status_color_id = ?
WHERE id = ?
`

type UpdateOperationParams struct {
	ParentID            sql.NullString `json:"parent_id"`
	EntityType          sql.NullString `json:"entity_type"`
	ShortName           sql.NullString `json:"short_name"`
	Description         sql.NullString `json:"description"`
	DecisionCriteria    sql.NullString `json:"decision_criteria"`
	SequenceGroup       sql.NullString `json:"sequence_group"`
	Sequence            sql.NullString `json:"sequence"`
	AlwaysPerform       sql.NullString `json:"always_perform"`
	Comment             sql.NullString `json:"comment"`
	LastUser            sql.NullString `json:"last_user"`
	ModifiedDate        sql.NullString `json:"modified_date"`
	QGateRelevantID     sql.NullString `json:"q_gate_relevant_id"`
	DecisionClassID     sql.NullString `json:"decision_class_id"`
	SavingClassID       sql.NullString `json:"saving_class_id"`
	VerificationClassID sql.NullString `json:"verification_class_id"`
	GenerationClassID   sql.NullString `json:"generation_class_id"`
	SerialOrParallelID  sql.NullString `json:"serial_or_parallel_id"`
	StatusColorID       sql.NullString `json:"status_color_id"`
	ID                  string         `json:"id"`
}

func (q *Queries) UpdateOperation(ctx context.Context, arg UpdateOperationParams) error {
	_, err := q.db.ExecContext(ctx, updateOperation,
		arg.ParentID,
		arg.EntityType,
		arg.ShortName,
		arg.Description,
		arg.DecisionCriteria,
		arg.SequenceGroup,
		arg.Sequence,
		arg.AlwaysPerform,
		arg.Comment,
		arg.LastUser,
		arg.ModifiedDate,
		arg.QGateRelevantID,
		arg.DecisionClassID,
		arg.SavingClassID,
		arg.VerificationClassID,
		arg.GenerationClassID,
		arg.SerialOrParallelID,
		arg.StatusColorID,
		arg.ID,
	)
	return err
}

const updateStation = `-- name: UpdateStation :exec
UPDATE stations
SET parent_id = ?, entity_type = ?, number = ?, name_description = ?, comment = ?, last_user = ?, modified_date = ?, station_type_id = ?, status_color_id = ?
WHERE id = ?
`

type UpdateStationParams struct {
	ParentID        sql.NullString `json:"parent_id"`
	EntityType      sql.NullString `json:"entity_type"`
	Number          sql.NullString `json:"number"`
	NameDescription sql.NullString `json:"name_description"`
	Comment         sql.NullString `json:"comment"`
	LastUser        sql.NullString `json:"last_user"`
	ModifiedDate    sql.NullString `json:"modified_date"`
	StationTypeID   sql.NullString `json:"station_type_id"`
	StatusColorID   sql.NullString `json:"status_color_id"`
	ID              string         `json:"id"`
}

func (q *Queries) UpdateStation(ctx context.Context, arg UpdateStationParams) error {
	_, err := q.db.ExecContext(ctx, updateStation,
		arg.ParentID,
		arg.EntityType,
		arg.Number,
		arg.NameDescription,
		arg.Comment,
		arg.LastUser,
		arg.ModifiedDate,
		arg.StationTypeID,
		arg.StatusColorID,
		arg.ID,
	)
	return err
}

const updateTool = `-- name: UpdateTool :exec
UPDATE tools
SET parent_id = ?, entity_type = ?, short_name = ?, description = ?, ip_address_device = ?, tool_with_sps = ?, sps_plc_name_spa_service = ?, sps_db_no_send = ?, sps_db_no_receive = ?, sps_pre_check_byte = ?, sps_address_in_send_db = ?, sps_address_in_receive_db = ?, comment = ?, last_user = ?, modified_date = ?, tool_class_id = ?, tool_type_id = ?, status_color_id = ?
WHERE id = ?
`

type UpdateToolParams struct {
	ParentID              sql.NullString `json:"parent_id"`
	EntityType            sql.NullString `json:"entity_type"`
	ShortName             sql.NullString `json:"short_name"`
	Description           sql.NullString `json:"description"`
	IpAddressDevice       sql.NullString `json:"ip_address_device"`
	ToolWithSps           sql.NullString `json:"tool_with_sps"`
	SpsPlcNameSpaService  sql.NullString `json:"sps_plc_name_spa_service"`
	SpsDbNoSend           sql.NullString `json:"sps_db_no_send"`
	SpsDbNoReceive        sql.NullString `json:"sps_db_no_receive"`
	SpsPreCheckByte       sql.NullString `json:"sps_pre_check_byte"`
	SpsAddressInSendDb    sql.NullString `json:"sps_address_in_send_db"`
	SpsAddressInReceiveDb sql.NullString `json:"sps_address_in_receive_db"`
	Comment               sql.NullString `json:"comment"`
	LastUser              sql.NullString `json:"last_user"`
	ModifiedDate          sql.NullString `json:"modified_date"`
	ToolClassID           sql.NullString `json:"tool_class_id"`
	ToolTypeID            sql.NullString `json:"tool_type_id"`
	StatusColorID         sql.NullString `json:"status_color_id"`
	ID                    string         `json:"id"`
}

func (q *Queries) UpdateTool(ctx context.Context, arg UpdateToolParams) error {
	_, err := q.db.ExecContext(ctx, updateTool,
		arg.ParentID,
		arg.EntityType,
		arg.ShortName,
		arg.Description,
		arg.IpAddressDevice,
		arg.ToolWithSps,
		arg.SpsPlcNameSpaService,
		arg.SpsDbNoSend,
		arg.SpsDbNoReceive,
		arg.SpsPreCheckByte,
		arg.SpsAddressInSendDb,
		arg.SpsAddressInReceiveDb,
		arg.Comment,
		arg.LastUser,
		arg.ModifiedDate,
		arg.ToolClassID,
		arg.ToolTypeID,
		arg.StatusColorID,
		arg.ID,
	)
	return err
}
