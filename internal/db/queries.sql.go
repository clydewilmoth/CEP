// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
)

const createLine = `-- name: CreateLine :one

INSERT INTO lines (name)
VALUES (?)
RETURNING id, name
`

// internal/db/queries/queries.sql
func (q *Queries) CreateLine(ctx context.Context, name string) (Line, error) {
	row := q.db.QueryRowContext(ctx, createLine, name)
	var i Line
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createOperation = `-- name: CreateOperation :one
INSERT INTO operations (name, tool_id)
VALUES (?, ?)
RETURNING id, name, tool_id
`

type CreateOperationParams struct {
	Name   string `json:"name"`
	ToolID int64  `json:"tool_id"`
}

func (q *Queries) CreateOperation(ctx context.Context, arg CreateOperationParams) (Operation, error) {
	row := q.db.QueryRowContext(ctx, createOperation, arg.Name, arg.ToolID)
	var i Operation
	err := row.Scan(&i.ID, &i.Name, &i.ToolID)
	return i, err
}

const createStation = `-- name: CreateStation :one
INSERT INTO stations (name, line_id)
VALUES (?, ?)
RETURNING id, name, line_id
`

type CreateStationParams struct {
	Name   string `json:"name"`
	LineID int64  `json:"line_id"`
}

func (q *Queries) CreateStation(ctx context.Context, arg CreateStationParams) (Station, error) {
	row := q.db.QueryRowContext(ctx, createStation, arg.Name, arg.LineID)
	var i Station
	err := row.Scan(&i.ID, &i.Name, &i.LineID)
	return i, err
}

const createTool = `-- name: CreateTool :one
INSERT INTO tools (name, station_id)
VALUES (?, ?)
RETURNING id, name, station_id
`

type CreateToolParams struct {
	Name      string `json:"name"`
	StationID int64  `json:"station_id"`
}

func (q *Queries) CreateTool(ctx context.Context, arg CreateToolParams) (Tool, error) {
	row := q.db.QueryRowContext(ctx, createTool, arg.Name, arg.StationID)
	var i Tool
	err := row.Scan(&i.ID, &i.Name, &i.StationID)
	return i, err
}

const getLineByID = `-- name: GetLineByID :one
SELECT id, name FROM lines
WHERE id = ?
`

func (q *Queries) GetLineByID(ctx context.Context, id int64) (Line, error) {
	row := q.db.QueryRowContext(ctx, getLineByID, id)
	var i Line
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getOperationsByToolID = `-- name: GetOperationsByToolID :many
SELECT id, name, tool_id FROM operations
WHERE tool_id = ?
`

func (q *Queries) GetOperationsByToolID(ctx context.Context, toolID int64) ([]Operation, error) {
	rows, err := q.db.QueryContext(ctx, getOperationsByToolID, toolID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Operation
	for rows.Next() {
		var i Operation
		if err := rows.Scan(&i.ID, &i.Name, &i.ToolID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStationsByLineID = `-- name: GetStationsByLineID :many
SELECT id, name, line_id FROM stations
WHERE line_id = ?
`

func (q *Queries) GetStationsByLineID(ctx context.Context, lineID int64) ([]Station, error) {
	rows, err := q.db.QueryContext(ctx, getStationsByLineID, lineID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Station
	for rows.Next() {
		var i Station
		if err := rows.Scan(&i.ID, &i.Name, &i.LineID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getToolsByStationID = `-- name: GetToolsByStationID :many
SELECT id, name, station_id FROM tools
WHERE station_id = ?
`

func (q *Queries) GetToolsByStationID(ctx context.Context, stationID int64) ([]Tool, error) {
	rows, err := q.db.QueryContext(ctx, getToolsByStationID, stationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tool
	for rows.Next() {
		var i Tool
		if err := rows.Scan(&i.ID, &i.Name, &i.StationID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLines = `-- name: ListLines :many
SELECT id, name FROM lines
`

func (q *Queries) ListLines(ctx context.Context) ([]Line, error) {
	rows, err := q.db.QueryContext(ctx, listLines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Line
	for rows.Next() {
		var i Line
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOperations = `-- name: ListOperations :many
SELECT id, name, tool_id FROM operations
`

func (q *Queries) ListOperations(ctx context.Context) ([]Operation, error) {
	rows, err := q.db.QueryContext(ctx, listOperations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Operation
	for rows.Next() {
		var i Operation
		if err := rows.Scan(&i.ID, &i.Name, &i.ToolID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStations = `-- name: ListStations :many
SELECT id, name, line_id FROM stations
`

func (q *Queries) ListStations(ctx context.Context) ([]Station, error) {
	rows, err := q.db.QueryContext(ctx, listStations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Station
	for rows.Next() {
		var i Station
		if err := rows.Scan(&i.ID, &i.Name, &i.LineID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTools = `-- name: ListTools :many
SELECT id, name, station_id FROM tools
`

func (q *Queries) ListTools(ctx context.Context) ([]Tool, error) {
	rows, err := q.db.QueryContext(ctx, listTools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tool
	for rows.Next() {
		var i Tool
		if err := rows.Scan(&i.ID, &i.Name, &i.StationID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
